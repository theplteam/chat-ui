[
  {
    "id": "test-id",
    "title": "Pleasant conversation",
    "messages": [
      {
        "id": "1",
        "role": "user",
        "content": "Hello!",
        "created": 1677652281
      },
      {
        "id": "chatcmpl-123",
        "object": "chat.completion",
        "created": 1677652282,
        "model": "gpt-4o-mini",
        "system_fingerprint": "fp_44709d6fcb",
        "choices": [{
          "index": 0,
          "message": {
            "role": "assistant",
            "content": "```js\nimport React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { dracula } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, Edit } from \"lucide-react\";\n\nconst MarkdownRenderer = ({ content }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [markdown, setMarkdown] = useState(content);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(markdown);\n    alert(\"Код скопирован!\");\n  };\n\n  return (\n    <Card className=\"p-4 relative\">\n      <div className=\"absolute top-2 right-2 flex gap-2\">\n        <Button size=\"icon\" variant=\"ghost\" onClick={() => setIsEditing(!isEditing)}>\n          <Edit size={16} />\n        </Button>\n        <Button size=\"icon\" variant=\"ghost\" onClick={handleCopy}>\n          <Copy size={16} />\n        </Button>\n      </div>\n      {isEditing ? (\n        <textarea\n          className=\"w-full p-2 border rounded-md\"\n          value={markdown}\n          onChange={(e) => setMarkdown(e.target.value)}\n          rows={10}\n        />\n      ) : (\n        <ReactMarkdown\n          components={{\n            code({ node, inline, className, children, ...props }) {\n              const match = /language-(\\w+)/.exec(className || \"\");\n              return !inline && match ? (\n                <SyntaxHighlighter\n                  style={dracula}\n                  language={match[1]}\n                  PreTag=\"div\"\n                  {...props}\n                >\n                  {String(children).replace(/\\n$/, \"\")}\n                </SyntaxHighlighter>\n              ) : (\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              );\n            },\n          }}\n        >\n          {markdown}\n        </ReactMarkdown>\n      )}\n    </Card>\n  );\n};\n\nexport default MarkdownRenderer;``` Text after"
          },
          "logprobs": null,
          "finish_reason": "stop"
        }],
        "service_tier": "default",
        "usage": {
          "prompt_tokens": 9,
          "completion_tokens": 12,
          "total_tokens": 21,
          "completion_tokens_details": {
            "reasoning_tokens": 0,
            "accepted_prediction_tokens": 0,
            "rejected_prediction_tokens": 0
          }
        }
      },
      {
        "id": "2",
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "Say that I am handsome."
          }
        ],
        "created": 1677652283
      },
      {
        "id": "chatcmpl-124",
        "object": "chat.completion",
        "created": 1677652284,
        "model": "gpt-4o-mini",
        "system_fingerprint": "fp_44709d6fcb",
        "choices": [{
          "index": 0,
          "message": {
            "role": "assistant",
            "content": "> blockquote.\n> blockquote.\n> blockquote `>`.\n>> blockquote `>>`."
          },
          "logprobs": null,
          "finish_reason": "stop"
        }],
        "service_tier": "default",
        "usage": {
          "prompt_tokens": 9,
          "completion_tokens": 12,
          "total_tokens": 21,
          "completion_tokens_details": {
            "reasoning_tokens": 0,
            "accepted_prediction_tokens": 0,
            "rejected_prediction_tokens": 0
          }
        }
      }
    ]
  }
]
